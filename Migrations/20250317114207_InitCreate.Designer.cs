// <auto-generated />
using System;
using MasterCore8.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MasterCore8.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250317114207_InitCreate")]
    partial class InitCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("MasterCore8.Models.AppUser", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("create_by")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("datetime");

                    b.Property<string>("delete_by")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("delete_date")
                        .HasColumnType("datetime");

                    b.Property<string>("dept")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("dept_full")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("div")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("empno")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ext")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("position")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("roles")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("update_by")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("update_date")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            id = "016623",
                            create_by = "016623",
                            create_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016),
                            dept = "ICD",
                            div = "CPD",
                            email = "preedee@mail.connon",
                            empno = "016623",
                            ext = "1",
                            name = "Preedee P.",
                            password = "016623",
                            position = "Sr.Programmer",
                            roles = "Admin",
                            status = "active",
                            update_by = "016623",
                            update_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016)
                        });
                });

            modelBuilder.Entity("MasterCore8.Models.tbbasic_crud", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("datetime");

                    b.Property<string>("detail")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("img")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("movie_code")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("publish_end_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("publish_start_date")
                        .HasColumnType("date");

                    b.Property<int?>("run_no")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("update_by")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("update_date")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.HasIndex("category");

                    b.HasIndex("create_by");

                    b.HasIndex("update_by");

                    b.ToTable("tbbasic_crud");
                });

            modelBuilder.Entity("MasterCore8.Models.tblookup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("datetime");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("lookup_code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("lookup_name")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("lookup_name2")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("lookup_name3")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("lookup_text")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("lookup_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("sortorder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("update_by")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("update_date")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.ToTable("tblookup");

                    b.HasDiscriminator<string>("lookup_type").HasValue("tblookup");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            id = 1,
                            create_by = "016623",
                            create_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016),
                            isdeleted = false,
                            lookup_code = "Action",
                            lookup_name = "หนังบู๊",
                            lookup_text = "หนังบู๊ หรือ แอคชั่น จะมีเรื่องราวการดำเนินการคล้ายกับการผจญภัย ตัวเอกมักจะมีความเสี่ยงซึ่งจะนำไปสู่สถานการณ์ที่สุดอันตราย (รวมถึงการระเบิดฉากต่อสู้ ฉากการหลบหนี การแสดงความกล้าหาญ ฯลฯ ) บ่อยครั้งที่หนังมีสององค์ประกอบรวมอยู่ด้วยคือ “แอคชั่น” กับ “ผจญภัย” (บางครั้งก็เป็นเราก็เรียกมันว่า “แอ็คชั่นผจญภัย”) เพราะพวกเขามีโครงสร้างที่เหมือนกันมาก เรื่องราวต่างๆ ยกตัวอย่างเช่น เจมส์บอนด์",
                            lookup_type = "BasicCRUDCategory",
                            sortorder = 1,
                            update_by = "016623",
                            update_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016)
                        },
                        new
                        {
                            id = 2,
                            create_by = "016623",
                            create_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016),
                            isdeleted = false,
                            lookup_code = "Adventure",
                            lookup_name = "หนังผจญภัย",
                            lookup_text = "เป็นเรื่องราวการผจญภัยที่เกี่ยวกับตัวเอกที่เดินทางไปยังสถานที่ที่ยิ่งใหญ่ หรือห่างไกลเพื่อทำบางสิ่งให้สำเร็จ อาจสามารถมีองค์ประกอบประเภทอื่นๆ อีกมากมายรวมอยู่ในนั้น เพราะมันเป็นประเภทที่เปิดกว้างมาก ตัวเอกมีภารกิจที่ต้องเผชิญหน้ากับอุปสรรคเพื่อไปให้ถึงจุดหมายปลายทางของพวกเขา นอกจากนี้เรื่องราวการผจญภัยมักจะมีเรื่องราวที่ลึกลับ ตัวละครก็จะมีพลังซ่อนอยู่",
                            lookup_type = "BasicCRUDCategory",
                            sortorder = 2,
                            update_by = "016623",
                            update_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016)
                        },
                        new
                        {
                            id = 3,
                            create_by = "016623",
                            create_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016),
                            isdeleted = false,
                            lookup_code = "Comedy",
                            lookup_name = "หนังตลก",
                            lookup_text = "Comedy เป็นเรื่องราวที่เล่าถึงเหตุการณ์ตลกๆ หรือตลกที่ตั้งใจจะทำให้ผู้ชมหัวเราะ มันเป็นประเภทที่เปิดกว้างมาก และไม่ค่อยจะเหมือนกับกับประเภทอื่นๆ เช่น หนังตลกซอมบี้ หนังล้อเลียน หนังตลกโรแมนติก ที่ตัวเอกมักจะทำอะไรตลกๆ เพื่อสร้างเสียงหัวเราะให้กับผู้ชมตลอดทั้งเรื่อง",
                            lookup_type = "BasicCRUDCategory",
                            sortorder = 3,
                            update_by = "016623",
                            update_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016)
                        },
                        new
                        {
                            id = 4,
                            create_by = "016623",
                            create_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016),
                            isdeleted = false,
                            lookup_code = "Crime",
                            lookup_name = "หนังอาชญากรรม",
                            lookup_text = "เป็นเรื่องราวอาชญากรรม ที่เกี่ยวข้องกับการกระทำที่ผิดกฎหมาย ตั้งแต่การปล้นธนาคาร ไปจนถึงการก่อการร้าย มันมักจะตกอยู่ในแนวแอ็คชั่นหรือแนวผจญภัย เช่น เรื่องราวของนักสืบ แก๊งมาเฟีย จอมโจร คดีฆาตกรรม ทั้งหมดนี้จัดอยู่ในภาพยนต์ประเภทอาชญากรรมทั้งสิ้น",
                            lookup_type = "BasicCRUDCategory",
                            sortorder = 4,
                            update_by = "016623",
                            update_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016)
                        },
                        new
                        {
                            id = 5,
                            create_by = "016623",
                            create_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016),
                            isdeleted = false,
                            lookup_code = "Drama",
                            lookup_name = "หนังดราม่า",
                            lookup_text = "ละครเป็นประเภทของนิยายเล่าเรื่อง ที่ใช้ในภาพยนตร์ ละครโทรทัศน์ และวิทยุ (หรือกึ่งนิยาย) ที่เน้นนำเสนอเนื้อเรื่องที่สมจริงของตัวละคร ละครดราม่ามักจะถูกพิจารณาว่าเป็นสิ่งที่ตรงกันข้ามกับหนังตลก แต่อาจพิจารณาแยกจากงานอื่นๆ",
                            lookup_type = "BasicCRUDCategory",
                            sortorder = 5,
                            update_by = "016623",
                            update_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016)
                        },
                        new
                        {
                            id = 6,
                            create_by = "016623",
                            create_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016),
                            isdeleted = false,
                            lookup_code = "Fantasy",
                            lookup_name = "หนังแฟนตาซี",
                            lookup_text = "เรื่องราวแฟนตาซีเป็นเรื่องเกี่ยวกับเวทมนตร์ หรือกองกำลังเหนือธรรมชาติมากกว่าเทคโนโลยี ถ้ามันเกิดขึ้นในยุคสมัยใหม่หรืออนาคต ขึ้นอยู่กับขอบเขตขององค์ประกอบอื่นๆ ยกตัวอย่าง Harry Potter จะมีข้อกำหนดของว่าเป็นหนังที่เกี่ยวข้องกับพ่อมด แต่มันถูกเรียกว่าเป็นซีรีย์แฟนตาซี",
                            lookup_type = "BasicCRUDCategory",
                            sortorder = 6,
                            update_by = "016623",
                            update_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016)
                        },
                        new
                        {
                            id = 7,
                            create_by = "016623",
                            create_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016),
                            isdeleted = false,
                            lookup_code = "Horror",
                            lookup_name = "หนังผี",
                            lookup_text = "เป็นการบอกเล่าเรื่องราวสยองขวัญโดยเจตนาทำให้ตกใจ หรือทำให้ผู้ชมหวาดกลัวโดยผ่านความระแวงอย่างรุนแรงหรือตกใจ ยกตัวอย่างเช่นผลงานของ H. P. Lovecraft หรือ หนังผีบ้านเราที่หลายคนอาจจะคุ้นเคยมากที่สุดอย่างแน่นอน",
                            lookup_type = "BasicCRUDCategory",
                            sortorder = 7,
                            update_by = "016623",
                            update_date = new DateTime(2025, 3, 17, 18, 42, 5, 204, DateTimeKind.Local).AddTicks(1016)
                        });
                });

            modelBuilder.Entity("MasterCore8.Models.tbstudent", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("active_date")
                        .HasColumnType("date");

                    b.Property<string>("address")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("class_room")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("create_by")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("create_date")
                        .HasColumnType("datetime");

                    b.Property<string>("gender")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("img")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("portfolio")
                        .HasColumnType("text");

                    b.Property<string>("signature")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("update_by")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("update_date")
                        .HasColumnType("datetime");

                    b.HasKey("id");

                    b.HasIndex("create_by");

                    b.HasIndex("update_by");

                    b.ToTable("tbstudent");
                });

            modelBuilder.Entity("MasterCore8.Models.LookupBasicCRUDCategory", b =>
                {
                    b.HasBaseType("MasterCore8.Models.tblookup");

                    b.ToTable("tblookup");

                    b.HasDiscriminator().HasValue("BasicCRUDCategory");
                });

            modelBuilder.Entity("MasterCore8.Models.LookupStudentCategory", b =>
                {
                    b.HasBaseType("MasterCore8.Models.tblookup");

                    b.ToTable("tblookup");

                    b.HasDiscriminator().HasValue("StudentCategory");
                });

            modelBuilder.Entity("MasterCore8.Models.tbbasic_crud", b =>
                {
                    b.HasOne("MasterCore8.Models.LookupBasicCRUDCategory", "lookup_category")
                        .WithMany()
                        .HasForeignKey("category")
                        .HasPrincipalKey("lookup_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterCore8.Models.AppUser", "create")
                        .WithMany()
                        .HasForeignKey("create_by");

                    b.HasOne("MasterCore8.Models.AppUser", "update")
                        .WithMany()
                        .HasForeignKey("update_by");

                    b.Navigation("create");

                    b.Navigation("lookup_category");

                    b.Navigation("update");
                });

            modelBuilder.Entity("MasterCore8.Models.tbstudent", b =>
                {
                    b.HasOne("MasterCore8.Models.AppUser", "create")
                        .WithMany()
                        .HasForeignKey("create_by");

                    b.HasOne("MasterCore8.Models.AppUser", "update")
                        .WithMany()
                        .HasForeignKey("update_by");

                    b.Navigation("create");

                    b.Navigation("update");
                });
#pragma warning restore 612, 618
        }
    }
}
